#!/usr/bin/env ruby
# frozen_string_literal: true

# require "#{File.dirname(__FILE__)}/lib/lxd-manager"
require 'lxd-manager'
require 'optparse'
require 'pp'
# LOG = "/tmp/manage-site-#{ENV['USER']}.log".freeze
MAX_WAIT_COUNT = 20 # 4 sec

def print_help(parser, subcommands)
  print parser.to_s
  subcommands.each_key { |k| print subcommands[k].to_s }
end

##
## Hack to add new method to OptionParser.
##
class OptionParser
  # Like order!, but leave any unrecognized --switches alone
  def order_recognized!(args)
    extra_opts = []
    begin
      order!(args) { |a| extra_opts << a }
    rescue OptionParser::InvalidOption => e
      extra_opts << e.args[0]
      retry
    end
    extra_opts
  end
end

########################################################################
#
#  Parse options
#
opts = {}

subcommands = {
  'add' => OptionParser.new do |parser|
    parser.on(
      '-i', '--image=IMAGE', String,
      'Image name or alias. If no image supplied, empry vm will be created'
    )
    parser.on('-p', '--profiles=PROF', Array, 'Profiles list via comma')
    parser.on('-n', '--no-network', 'Do not forward network')
    parser.on(
      '-d', '--domain=DOMAIN', String, 'Use this internet domain with name'
    )
    parser.on('-f', '--forward-only', 'Forward network into existing container')
    parser.banner = "\nadd [options] container_name"
  end,
  'del' => OptionParser.new do |parser|
    parser.banner = "\ndel container_name"
  end,
  'stop' => OptionParser.new do |parser|
    parser.banner = "\nstop container_name"
  end,
  'start' => OptionParser.new do |parser|
    parser.banner = "\nstart container_name"
  end,
  'list' => OptionParser.new do |parser|
    parser.on('-c', '--csv', 'Use csv output')
    parser.banner = "\nlist [options]"
  end
}
parser = OptionParser.new do |p|
  p.on('-v', '--verbose', 'Show more info')
  p.on('-h', '--help')
end

parser.banner =
  "Usage: #{$PROGRAM_NAME} {add|del|stop|start|list} [options]"

args = parser.order_recognized!(into: opts)
# warn args
mode = args.shift
if !subcommands.keys.include?(mode) || opts[:help]
  print_help parser, subcommands
  exit 0
end

info "MODE: #{mode}"

subcommands[mode].parse!(args, into: opts)
info "ARGS: #{args.inspect}"

profiles = opts[:profiles] || ['default']
image_name = opts[:image]
forward_only = opts[:'forward-only']
no_net = opts[:'no-network']
domain = opts[:domain]
$verbose = opts[:verbose]

#
# This class describes lxd commands.
#
class LXDCommands
  #
  # Contrsuctor
  #
  # @param      args  Hash of args:
  #             - :mode  type of command (:add, :del, :list)
  #
  def initialize(args)
    @mode = args[:mode]
    @verbose = args[:verbose]
    @debug = args[:debug]
    @max_wait_count = args[:max_wait_count] || ::MAX_WAIT_COUNT
  end

  ##
  ## create a VM
  ##
  ## @param      name  VM name
  ## @param      opts  The options
  ##
  def add # (name, opts)
    warn 'unimplemented'
  end

  ##
  ## Connect to LXD
  ##
  ## @return     nothing
  ##
  def start
    @lxd = LXD::Manager.new(debug: @debug)
  end

  def start_container(name)
    state = @lxd.container_state(name)
    if state.nil? || state['status_code'] != 103
      @lxd.update_state name, action: 'start'
    end
  end

  def make_src(name)
    @src = if name.to_s == ''
             { type: 'none' }
           else
             img = @lxd.fingerprint_by_imagename(name) || name
             { type: 'image', protocol: 'simplestreams', fingerprint: img }
           end
  end

  ##
  ## Return LXD::Container by its name
  ##
  ## @param      name  The name
  ## @return     LXD::Container or nil
  ##
  def container_by_name(name)
    state = @lxd.container_state(name)
    return nil if state.nil?
    # create container description by current state
    LXD::Container.new(state)
  end

  ##
  ## Gets the or creates a container
  ##
  ## @param      name  The containername
  ##
  def get_or_create(name, forward_only, profiles = [], image = nil)
    if forward_only
      container_by_name(name)
    else
      src = make_src(image)
      warn "src=#{src.inspect}; profiles=#{profiles}; image=#{image}"
      cont = LXD::Container.new(
        profiles: profiles,
        name: name,
        fingerprint: src[:fingerprint],
        source: src
      )
      @lxd.create_lxd_vm(cont) ? container_by_name(name) : nil
    end
  end

  ##
  ## Creates configs for nginx/xinetd/...
  ##
  ## @param      host    The host
  ## @param      cont    The container
  ## @param      domain  The domain
  ##
  def create_configs(host, cont, domain = nil)
    @lxd.create_configs(host, cont, domain)
  end

  ##
  ## Gets the container ip.
  ##
  ## @param      name  The container name
  ##
  def get_container_ip(name)
    st = nil
    net = nil
    count = @max_wait_count
    loop do
      st = @lxd.container_state(name)
      net = st && st['metadata'] && st['metadata']['network']
      break if net &&
               net['eth0'] &&
               !net['eth0']['addresses'].empty? &&
               net['eth0']['addresses'].any? { |x| x['family'] == 'inet' }
      sleep 0.2
      count -= 1
      return nil if count < 0
    end
    addr = net['eth0']['addresses'].select { |x| x['family'] == 'inet' }
    addr.empty? ? nil : addr[0]['address']
  end

  ##
  ## Get a LXD last error
  ##
  ## @return     Last error value
  ##
  def err
    @lxd.err
  end
end

##
## Print the message and exit
##
## @param      txt   The text
##
def fail(txt)
  warn txt
  exit 1
end

##
## convert container hash to a description string
##
## @param      state  The state
## @return     string with a description
##
def describe_cont(cont)
  return 'Unknown error' if cont.nil?

  case cont[:code]
  when '404'
    'Container not found'
  when '400'
    'Operation is not allowed'
  else
    "Error code #{cont[:code]}"
  end
end

##
## Print the text if verbose is true
##
## @param      txt   The text
##
def info(txt)
  warn txt if $verbose
end

name = args[0]

case mode
when 'add'
  if name.nil?
    print_help parser, subcommands
    exit 1
  end

  l = LXDCommands.new(verbose: $verbose, debug: false)
  fail('Cannot connect to lxd') if l.nil?
  l.start
  c = l.get_or_create(name, forward_only, profiles, image_name)
  # fail "Cannot find container #{name}" if state.nil?
  fail("Cannot create container #{name} (#{l.err})") if c.nil?

  info('Created.')

  exit(0) if image_name.to_s == ''
  info('Staring.')

  exit(0) if no_net

  l.start_container(name)
  fail('Cannot start a container') unless l
  info('Started.')

  local_ip = l.get_container_ip(name)
  fail('Cannot find any ipv4 address on eth0') if local_ip.nil?
  info("Got ip address: #{local_ip}")

  c.local_ip = local_ip
  ok, status = l.create_configs(name, c, domain ? "#{name}.#{domain}" : name)
  fail(describe_cont(status)) unless ok

  res = system('sudo', 'systemctl', 'restart', 'xinetd')
  info "XINETD: #{res}\n"
  res = system('/usr/local/sbin/nginx-modsite', '-b', '-e', "#{name}.conf")
  info "NGINX: #{res}\n"
  res = system('/usr/local/bin/ddns-update.sh', name)
  info "DNS: #{res}\n"
when 'list'
  m = LXD::Manager.new(debug: false)
  answer = m.containers
  if opts[:csv]
    x = answer.map do |a|
      cont = m.container(a.split('/').last)
      [a, cont ? cont.lxd['metadata'] : "Error: #{m.err}"]
    end.to_a
    print x.to_json
  else
    answer.each do |cont|
      name = cont.split('/').last
      print "#{name}:\n"
      data = m.container(name).lxd['metadata']
      print "  status: #{data['status']}\n  location: #{data['location']}\n"
      print "  profiles: #{data['profiles']}\n"
      print "  MAC: #{data['config']['volatile.eth0.hwaddr']}\n"
    end
  end
when 'stop'
  if name.nil?
    print_help parser, subcommands
    exit 1
  end
  m = LXD::Manager.new(debug: false)
  m.update_state(name, action: 'stop')
  count = 0
  state = nil
  cont = nil
  loop do
    sleep 0.2
    cont = m.container_state(name)
    info cont.inspect
    state = cont && cont['metadata'] ? cont['metadata']['status'] : nil
    break if state != 'Running'
    count += 1
    break if count > ::MAX_WAIT_COUNT
  end
  if count > ::MAX_WAIT_COUNT
    print "Cannot stop #{name}. #{describe_cont(cont)}.\n"
  elsif state.nil?
    print "Cannot stop #{name}... #{describe_cont(cont)}.\n"
  else
    print "Stopped.\n"
  end
when 'start'
  if name.nil?
    print_help parser, subcommands
    exit 1
  end
  m = LXD::Manager.new(debug: false)
  m.update_state(name, action: 'start')
  count = 0
  state = nil
  cont = nil
  loop do
    sleep 0.2
    cont = m.container_state(name)
    state = cont ? cont.lxd['metadata']['status'] : nil
    break if state == 'Running'
    count += 1
    break if count > ::MAX_WAIT_COUNT
  end
  if count > ::MAX_WAIT_COUNT
    print "Cannot start #{name}. #{describe_cont(cont)}.\n"
  elsif state.nil?
    print "Cannot start #{name}...#{describe_cont(cont)}.\n"
  else
    print "Started.\n"
  end
when 'del'
  if name.nil?
    print_help parser, subcommands
    exit 1
  end
  m = LXD::Manager.new(debug: false)
  ret = m.delete(name)
  fail "Cannot delete a container: #{describe_cont(ret)}\n" if ret[:failed]

  # disable site
  res = system('/usr/local/sbin/nginx-modsite', '-b', '-d', "#{name}.conf")
  info "NGINX: #{res}\n"

  if m.delete_configs(name)
    res = system('sudo', 'systemctl', 'restart', 'xinetd')
    info "XINETD: #{res}\n"
    print "Deleted\n"
  else
    print "Failed.\n"
  end
end

__END__
{'type"=>"sync",
 "status"=>"Success",
 "status_code"=>200,
 "operation"=>"",
 "error_code"=>0,
 "error"=>"",
 "metadata"=>
  {"architecture"=>"x86_64",
   "config"=>
    {"image.architecture"=>"amd64",
     "image.description"=>"Debian buster amd64 (20210602_05:24)",
     "image.os"=>"Debian",
     "image.release"=>"buster",
     "image.serial"=>"20210602_05:24",
     "volatile.base_image"=>
      "436d7f1bb0ce75f38787836d5a8c22e5d67346adc62b5a3f2dd1a8c0bfaf8581",
     "volatile.eth0.host_name"=>"vethNR0OVZ",
     "volatile.eth0.hwaddr"=>"00:16:3e:44:2c:c9",
     "volatile.idmap.base"=>"0",
     "volatile.idmap.current"=>
      "[{\"Isuid\":true,\"Isgid\":false,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000},{\"Isuid\":false,\"Isgid\":true,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000}]",
     "volatile.idmap.next"=>
      "[{\"Isuid\":true,\"Isgid\":false,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000},{\"Isuid\":false,\"Isgid\":true,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000}]",
     "volatile.last_state.idmap"=>
      "[{\"Isuid\":true,\"Isgid\":false,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000},{\"Isuid\":false,\"Isgid\":true,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000}]",
     "volatile.last_state.power"=>"RUNNING"},
   "devices"=>{},
   "ephemeral"=>false,
   "profiles"=>["lxdMosaicPullMetrics", "btr"],
   "stateful"=>false,
   "description"=>"",
   "created_at"=>"2021-06-02T15:05:38+03:00",
   "expanded_config"=>
    {"environment.lxdMosaicPullMetrics"=>"y",
     "image.architecture"=>"amd64",
     "image.description"=>"Debian buster amd64 (20210602_05:24)",
     "image.os"=>"Debian",
     "image.release"=>"buster",
     "image.serial"=>"20210602_05:24",
     "volatile.base_image"=>
      "436d7f1bb0ce75f38787836d5a8c22e5d67346adc62b5a3f2dd1a8c0bfaf8581",
     "volatile.eth0.host_name"=>"vethNR0OVZ",
     "volatile.eth0.hwaddr"=>"00:16:3e:44:2c:c9",
     "volatile.idmap.base"=>"0",
     "volatile.idmap.current"=>
      "[{\"Isuid\":true,\"Isgid\":false,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000},{\"Isuid\":false,\"Isgid\":true,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000}]",
     "volatile.idmap.next"=>
      "[{\"Isuid\":true,\"Isgid\":false,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000},{\"Isuid\":false,\"Isgid\":true,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000}]",
     "volatile.last_state.idmap"=>
      "[{\"Isuid\":true,\"Isgid\":false,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000},{\"Isuid\":false,\"Isgid\":true,\"Hostid\":1000000,\"Nsid\":0,\"Maprange\":1000000000}]",
     "volatile.last_state.power"=>"RUNNING"},
   "expanded_devices"=>
    {"eth0"=>
      {"name"=>"eth0", "nictype"=>"bridged", "parent"=>"br0", "type"=>"nic"},
     "root"=>{"path"=>"/", "pool"=>"pool2", "type"=>"disk"}},
   "name"=>"mydeb10",
   "status"=>"Running",
   "status_code"=>103,
   "last_used_at"=>"2021-07-25T08:16:02.505782155+03:00",
   "location"=>"n2021-3"}}
